#!/system/bin/sh
# chmod -R 755 /system/etc/init.d /system/su.d
#
# ROM GApps Auto-Integration
# osm0sis @ xda-developers

logbuff() { logbuff+="$($*)"; }
writable() { touch $1/tmpfile 2>/dev/null; ret=$?; rm $1/tmpfile 2>/dev/null; echo $ret; }

# quick and dirty math to figure out if the next integration will likely have enough free space in /system
freespace() {
  free=$(df -Pm /system 2>/dev/null | tail -n 1 | awk '{ print $4 }');
  case $free in *K) free=0;; *M) free=`echo $free | cut -d. -f1`;; *G) free=$((`echo $free | cut -d. -f1` * 1024));; esac;
  libsize=$(unzip -l $1 "lib/*" | tail -n 1 | awk '{ print $1 }');
  test $libsize -lt 1048576 && libsize=1 || libsize=$((libsize / 1048576));
  datapksize=$(du -m $1 | awk '{ print $1 }');
  sysapksize=$(du -m $2 | awk '{ print $1 }');
  need=$((datapksize + libsize - sysapksize));
  test $free -gt $need; echo $?;
}

# create log/change filedate immediately to indicate script is active once /sdcard is available
log=/sdcard/gapps-integrator.log;
until [ "$(writable /sdcard; touch $log)" == 0 ]; do
  sleep 1;
done&

# wait for /system to become remountable/writable
until [ "$(mount -o remount,rw /system >/dev/null; writable /system; mount -o remount,ro /system >/dev/null)" == 0 ]; do
  sleep 1;
done;

logbuff echo -n `date`;
gtmp=/data/local/tmp/gapp;

# get SDK version to perform different actions due to /data/app layout changes 
sdkver=`getprop ro.build.version.sdk`;

# check for zip and zipalign binaries to determine integration method
test "$(which zip)" -a "$(which zipalign)" && zipbins=1;

# find new unintegrated Google Apps APKs in /data
for i in $(ls /data/app/ | grep -E 'com.android|com.google.android|com.chrome'); do

  # find equivalent /system APK name and only process if it exists
  xml=/data/system/packages.xml;
  package=`echo $i | rev | cut -d- -f2- | rev`;
  sysapk=`grep "updated-package name=\"$package\"" $xml | grep -o 'codePath=.*$' | cut -d\" -f2`;

  logbuff echo -ne "\n/data/app/$i $sysapk";

  if [ "$sysapk" ]; then

    # compare /data and /system APK versions and only integrate if /data is newer (necessary on Lollipop and above)
    datver=$(grep "codePath=\"/data/app/$i\"" $xml | grep -o 'version=.*$' | cut -d\" -f2);
    sysver=$(grep "codePath=\"$sysapk\"" $xml | grep -o 'version=.*$' | cut -d\" -f2);

    if [ "$datver" -gt "$sysver" ]; then

      logbuff echo -ne "\x20($datver > $sysver)";
      mkdir -p $gtmp;

      # KitKat (and below) support
      if [ "$sdkver" -le 20 ]; then
        datapk=/data/app/$i;

        # skip current APK if it fails a free space check
        if [ "$(freespace $datapk $sysapk)" != 0 ]; then
          logbuff echo -ne "\x20*";
          continue;
        fi;

        # remove libraries from copied APK and zipalign if the binaries exist
        if [ "$zipbins" ]; then
          cp -fp $datapk $gtmp/preopt-$i;
          zip -d $gtmp/preopt-$i lib/*/*;
          zipalign 4 $gtmp/preopt-$i $gtmp/$i;
          datapk=$gtmp/$i;
        fi;

        # extract and force copy libraries to /system
        unzip /data/app/$i -d $gtmp lib/*;
        chmod 644 $gtmp/lib/*/*;
        mount -o remount,rw /system;
        rm -f $sysapk;
        cp -fp $gtmp/lib/*/* /system/lib/;

        # overwrite /system APK with new /data APK then fix permissions
        cp -f $datapk $sysapk;
        chown root.root $sysapk;
        chmod 644 $sysapk;

      # Lollipop support
      elif [ "$sdkver" -le 22 ]; then
        datapk=/data/app/$i/base.apk;
        sysname=`basename $sysapk`;

        # save time on boots after APK work has been completed but apps are awaiting optimization
        if [ ! -f /data/app/$i/integrated ]; then

          # skip current APK if it fails a free space check
          if [ "$(freespace $datapk $sysapk/$sysname.apk)" != 0 ]; then
            logbuff echo -ne "\x20*";
            continue;
          fi;

          # remove libraries from copied APK and zipalign if the binaries exist
          if [ "$zipbins" ]; then

            # workaround for Chrome not playing by the usual rules (per usual)
            case $package in
              com.android.chrome|com.chrome.*)
                mount -o remount,rw /system;
                rm -f $sysapk/lib/*/libchrome.so;;
              *)

                cp -fp $datapk $gtmp/preopt-$i.apk;
                zip -d $gtmp/preopt-$i.apk lib/*/*;
                zipalign 4 $gtmp/preopt-$i.apk $gtmp/$i.apk;
                datapk=$gtmp/$i.apk;;

            esac;
          fi;

          # force copy libraries to /system respecting symlinks then clean up empty files
          mount -o remount,rw /system;
          rm -f $sysapk/$sysname.apk;
          cp -RLf /data/app/$i/lib $sysapk;
          for j in `ls $sysapk/lib/*/*`; do
            test ! -s $j && rm -f $j;
          done;

          # overwrite /system APK with new /data APK then fix permissions
          cp -fp $datapk $sysapk/$sysname.apk;
          chown -R root.root $sysapk;
          chmod -R 755 $sysapk/lib;
          chmod 644 $sysapk/$sysname.apk $sysapk/lib/*/*;

          # flag for cleanup on reboot following optimization
          touch /data/app/$i/integrated;

        fi;
        # remove packages.xml entry for /data APK
        sed -i -e "/<updated-package name=\"${package}\"/,/<\/updated-package>/d" $xml;

      # Marshmallow (and above) support
      elif [ "$sdkver" -ge 23 ]; then
        datapk=/data/app/$i/base.apk;
        sysname=`basename $sysapk`;

        # save time on boots after APK work has been completed but apps are awaiting optimization
        if [ ! -f /data/app/$i/integrated ]; then

          # skip current APK if it fails a free space check
          if [ "$(freespace $datapk $sysapk/$sysname.apk)" != 0 ]; then
            logbuff echo -ne "\x20*";
            continue;
          fi;

          # decompress libraries within copied APK and zipalign if the binaries exist (maintains proper Marshmallow and above structure)
          if [ "$zipbins" ]; then

            # exclude APKs that cause breakage after integration
            case $package in
              com.google.android.inputmethod.*|com.google.android.tts)
                logbuff echo -ne "\x20!";
                continue;;
            esac;

            unzip $datapk -d $gtmp lib/*;
            cp -fp $datapk $gtmp/preopt-$i.apk;
            zip -d $gtmp/preopt-$i.apk lib/*/*;
            cd $gtmp;
            zip -r -0 -D $gtmp/preopt-$i.apk lib/;
            zipalign -p 4 $gtmp/preopt-$i.apk $gtmp/$i.apk;
            datapk=$gtmp/$i.apk;

          else
            # exclude APKs that cause breakage with the fallback method
            case $package in
              com.google.android.tts)
                logbuff echo -ne "\x20!";
                continue;;
            esac;

            # otherwise force copy libraries to /system respecting symlinks then clean up empty files
            if [ -e /data/app/$i/lib/* ]; then
              mount -o remount,rw /system;
              rm -f $sysapk/$sysname.apk;
              cp -RLf /data/app/$i/lib $sysapk;
              for j in `ls $sysapk/lib/*/*`; do
                test ! -s $j && rm -f $j;
              done;
            fi;

          fi;
          # if necessary force copy APK odex file to /system
          mount -o remount,rw /system;
          if [ -d $sysapk/oat ]; then
            cp -fp /data/app/$i/oat $sysapk;
            cd $sysapk/oat/*/;
            mv base.odex $sysname.odex;
          fi;

          # overwrite /system APK with new /data APK then fix permissions
          cp -fp $datapk $sysapk/$sysname.apk;
          chown -R root.root $sysapk;
          chmod -R 755 $sysapk/lib $sysapk/oat;
          chmod 644 $sysapk/$sysname.apk $sysapk/lib/*/* $sysapk/oat/*/*;

          # flag for cleanup on reboot following optimization
          touch /data/app/$i/integrated;

        fi;
        # remove packages.xml entry for /data APK
        sed -i -e "/<updated-package name=\"${package}\"/,/<\/updated-package>/d" $xml;

      fi;
      mount -o remount,ro /system;
      rm -rf $gtmp;

    else
      # clean up any duplicate packages that are not the current active copy
      rm -rf /data/app/$i;

    fi;
  elif [ -f /data/app/$i/integrated ]; then

    # clean up to mimic pre-Lollipop (AOSP) behavior
    rm -rf /data/app/$package-*;

  fi;
done;

# global cleanups required on Lollipop (and above)
if [ "$sdkver" -ge 21 ]; then

  # fix /system/lib permissions to ensure libs copied via symlink are correct
  mount -o remount,rw /system;
  chown root.root /system/lib/*.so;
  chmod 644 /system/lib/*.so;
  mount -o remount,ro /system;
  rm -rf $gtmp;

fi;

logbuff echo -e "\n---";

# write buffered log once /sdcard is available
until [ "$(writable /sdcard)" == 0 ]; do
  sleep 1;
done;
test ! -s $log && echo -e "## GApps Auto-Integration Script Log\n#\n# * = not enough free space, ! = excluded\n" > $log;
echo -e "$logbuff\n" >> $log;

